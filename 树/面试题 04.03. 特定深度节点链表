# -*- coding: utf-8 -*-
'''
题目：特定深度节点链表
给定一棵二叉树，设计一个算法，创建含有某一深度上所有节点的链表（比如，若一棵树的深度为 D，则会创建出 D 个链表）。返回一个包含所有深度的链表的数组

输入：[1,2,3,4,5,null,7,8]

        1
       /  \ 
      2    3
     / \    \ 
    4   5    7
   /
  8

输出：[[1],[2,3],[4,5,7],[8]]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/list-of-depth-lcci

'''

'''
思路：
1. 判断边界值
2. 定义队列
3. 遍历当前队列中的所有节点
4. 判断该节点下是否有左右节点，如果有则分别添加到链表中
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def listOfDepth(self, tree: TreeNode) -> List[ListNode]:
        from collections import deque

        if not tree:
            return []
        
        queue = deque()
        queue.append(tree)

        res = []
        while queue:
            level = cur = ListNode(0)
            for _ in range(len(queue)):
                node = queue.popleft()
                cur.next = ListNode(node.val)
                cur = cur.next
                if node.left:
                    queue.append(node.left)
                if node.right:
                    queue.append(node.right)
            res.append(level.next)
        return  res
        
