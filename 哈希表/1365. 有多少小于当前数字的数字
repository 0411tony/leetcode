# -*- coding: utf-8 -*-
'''
题目：
给你一个数组 nums，对于其中每个元素 nums[i]，请你统计数组中比它小的所有数字的数目。
换而言之，对于每个 nums[i] 你必须计算出有效的 j 的数量，其中 j 满足 j != i 且 nums[j] < nums[i]
以数组形式返回答案

例如：
输入：nums = [8,1,2,2,3]
输出：[4,0,1,1,3]
解释： 
对于 nums[0]=8 存在四个比它小的数字：（1，2，2 和 3）。 
对于 nums[1]=1 不存在比它小的数字。
对于 nums[2]=2 存在一个比它小的数字：（1）。 
对于 nums[3]=2 存在一个比它小的数字：（1）。 
对于 nums[4]=3 存在三个比它小的数字：（1，2 和 2）。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/how-many-numbers-are-smaller-than-the-current-number
'''

'''
思路：
1. 双层循环判断
2. 先排序，再判断

'''

class Solution:
    def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
        ans = []
        for i in range(len(nums)):
            number = 0
            for j in range(len(nums)):
                if i!=j and nums[i]>nums[j]:
                    number += 1
            ans.append(number)
        return ans

# class Solution:
#     def smallerNumbersThanCurrent(self, nums: List[int]) -> List[int]:
#         n = len(nums)
#         vec = [0] * n
#         tmp = sorted([(nums[i], i) for i in range(n)])
        
#         pre = -1
#         for i in range(n):
#             if i != 0 and tmp[i][0] != tmp[i - 1][0]:
#                 pre = i - 1
#             vec[tmp[i][1]] = pre + 1
#         return vec

