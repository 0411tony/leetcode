# -*- coding: utf-8 -*-
'''
题目：
翻转二叉树。
例如：
输入: 
     4
   /   \
  2     7
 / \   / \
1   3 6   9
输出: 
     4
   /   \
  7     2
 / \   / \
9   6 3   1
来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/invert-binary-tree/
'''

'''
思路：
1.首先判断特殊情况，树为空的时候
2.将根节点的左右节点互换位置
3.分别判断左右子树是否存在，如果存在，分别将其压入栈中
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return []
        stack=[root]
        while stack:
            node=stack.pop()
            node.left,node.right=node.right,node.left
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
        return root

'''
# 递归思路
class Solution:
    def invertTree(self, root: TreeNode) -> TreeNode:
        if not root:
            return root
        
        left = self.invertTree(root.left)
        right = self.invertTree(root.right)
        root.left, root.right = right, left
        return root
'''
