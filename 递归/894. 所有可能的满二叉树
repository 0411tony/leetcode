# -*- coding: utf-8 -*-
'''
题目：所有可能的满二叉树
满二叉树是一类二叉树，其中每个结点恰好有 0 或 2 个子结点。
返回包含 N 个结点的所有可能满二叉树的列表。 答案的每个元素都是一个可能树的根结点。
答案中每个树的每个结点都必须有 node.val=0。

输入：7
输出：[[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
解释：

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/all-possible-full-binary-trees

'''

'''
思路：
1. 首先判断特殊值，当节点个数为0时，当节点个数为1时
2. 如果对左子树构建x个节点，则对右子树构建N-x-1个节点, 其中1为根节点
3. 分别递归对x和y个节点构建子树
'''

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:

    def allPossibleFBT(self, N: int) -> List[TreeNode]:
        self.memo = {0:[],1:[TreeNode(0)]}

        def dfs(n):
            if n not in self.memo:
                ans = []
                for x in range(n):
                    y = n-1-x
                    for left in dfs(x):
                        for right in dfs(y):
                            bnf = TreeNode(0)
                            bnf.left = left
                            bnf.right = right
                            ans.append(bnf)
                self.memo[n] = ans
        
            return self.memo[n]
        
        return dfs(N)
